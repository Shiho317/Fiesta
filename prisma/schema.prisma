// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @unique @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    hosting       Event[]
    invitationsSent Invitation[]
}

model Event {
    id String @id @unique @default(cuid())
    name String
    hostId String
    host User @relation(fields: [hostId], references: [id], onDelete: Cascade)
    guests Guest[]
    plannerId String?
    planner Planner? @relation(fields: [plannerId], references: [id], onDelete: Cascade)
    venueId String?
    venue Venue? @relation(fields: [venueId], references: [id], onDelete: Cascade)
    invitations Invitation[]
    updatedAt DateTime? @updatedAt
    createdAt DateTime? @default(now())
}

model Guest {
    id String @id @unique @default(cuid())
    name String
    email String @unique
    phone String?
    eventId String
    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    updatedAt DateTime? @updatedAt
    createdAt DateTime? @default(now())
}

model Planner {
    id String @id @unique @default(cuid())
    name String
    email String @unique
    phone String?
    events Event[]
    organization String?
    updatedAt DateTime? @updatedAt
    createdAt DateTime? @default(now())
}

model Venue {
    id String @id @unique @default(cuid())
    name String
    country String
    state_province String
    city String
    address String
    zipcode String
    events Event[]
}

model Invitation {
    id String @id @unique @default(cuid())
    email String
    name String
    token String
    accepted Boolean @default(false)
    expiresAt      DateTime
    acceptedAt     DateTime?
    eventId String
    event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
    invitedById String
    invitedBy User @relation(fields: [invitedById], references: [id], onDelete: Cascade)
    createdAt      DateTime?    @default(now())
    updatedAt      DateTime?    @updatedAt
}

model CardTemplate {
    id String @id @default(cuid())
    html String
    text String
    name String
}

model EmailTemplate {
    id String @id @default(cuid())
    html String
    text String
    name String
    updatedAt DateTime? @updatedAt
    createdAt DateTime? @default(now())
}
